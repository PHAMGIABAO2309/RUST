use warp::Filter;
use hello_rust2::*;
use std::sync::Arc;
use tokio::sync::Mutex;

#[tokio::main]
async fn main() {
    // Káº¿t ná»‘i database
    let pool = database::connect_db().await.expect("KhÃ´ng thá»ƒ káº¿t ná»‘i MySQL");

    // Láº¥y dá»¯ liá»‡u thÆ¡ tá»« database
    let poem_content = match database::get_poem_content(&pool).await {
        Ok(content) => Arc::new(Mutex::new(content)),  // Náº¿u dá»¯ liá»‡u cÃ³ thá»ƒ thay Ä‘á»•i
        Err(_) => Arc::new(Mutex::new("KhÃ´ng thá»ƒ láº¥y dá»¯ liá»‡u thÆ¡".to_string())),
    };

    // Láº¥y ná»™i dung function_content() (khÃ´ng thay Ä‘á»•i nÃªn khÃ´ng cáº§n Mutex)
    let my_func_content = Arc::new(content::function_content());

    // ðŸ‘‰ Route trang `/hello`
    let hello_route = warp::path("hello").and_then(move || handle_hello(poem_content.clone(), my_func_content.clone()));

    // ðŸ‘‰ Route trang `/register`
    let pool_clone = pool.clone();
    let register_route = warp::path("register")
        .and(warp::get())
        .map(|| warp::reply::html(front_end::register::register_page()))
        .or(warp::path("register")
            .and(warp::post())
            .and(warp::body::form())
            .and_then(move |form_data| {
                let pool_clone = pool_clone.clone();
                async move { front_end::register::handle_register(pool_clone, form_data).await }
            }));

    // Route file tÄ©nh (CSS, JS, hÃ¬nh áº£nh)
    let static_files = warp::path("static").and(warp::fs::dir("./static"));

    println!("ðŸš€ Server cháº¡y táº¡i http://localhost:8080/");

    // Cháº¡y server vÃ  Ä‘á»£i tÃ­n hiá»‡u Ctrl+C
    let server = warp::serve(hello_route.or(register_route).or(static_files))
        .run(([127, 0, 0, 1], 8080));

    tokio::select! {
        _ = server => {},
        _ = tokio::signal::ctrl_c() => {
            println!("ðŸ“Œ Nháº­n tÃ­n hiá»‡u Ctrl+C, Ä‘áº©y code lÃªn GitHub...");
            push_github::push_to_github();
        }
    }
}

// ðŸ‘‰ HÃ m xá»­ lÃ½ request `/hello`
async fn handle_hello(poem: Arc<Mutex<String>>, func: Arc<String>) -> Result<impl warp::Reply, warp::Rejection> {
    let poem_content = poem.lock().await.clone();  // Láº¥y ná»™i dung thÆ¡
    let html = front_end::hello::home(&poem_content, &func);
    Ok(warp::reply::html(html))
}


