use warp::Filter;
use hello_rust2::*;
use std::sync::Arc;
 // ğŸ‘‰ Import Pool MySQL

#[tokio::main]
async fn main() {
    let pool = database::connect_db().await.expect("KhÃ´ng thá»ƒ káº¿t ná»‘i MySQL");  // ğŸ‘‰ Káº¿t ná»‘i database

    // ğŸ‘‰ Láº¥y dá»¯ liá»‡u thÆ¡ tá»« database
    let poem_content = route::get_poem_data(&pool).await;

    // ğŸ‘‰ Láº¥y ná»™i dung function_content()
    let my_func_content = Arc::new(content::function_content());

    // ğŸ‘‰ Cáº¥u hÃ¬nh cÃ¡c routes
    let hello_route = route::create_hello_route(poem_content.clone(), my_func_content.clone());
    let register_route = route::create_register_route(pool.clone());
    let static_files = route::create_static_route();

    println!("ğŸš€ Server cháº¡y táº¡i http://localhost:8080/");

    let server = warp::serve(hello_route.or(register_route).or(static_files)) // ğŸ‘‰ Cháº¡y server
        .run(([127, 0, 0, 1], 8080));

    wait_for_exit(server).await;
}


// ğŸ‘‰ HÃ m Ä‘á»£i tÃ­n hiá»‡u Ctrl+C Ä‘á»ƒ dá»«ng server
async fn wait_for_exit(server: impl std::future::Future<Output = ()>) {
    tokio::select! {
        _ = server => {},
        _ = tokio::signal::ctrl_c() => {
            println!("ğŸ“Œ Nháº­n tÃ­n hiá»‡u Ctrl+C, Ä‘áº©y code lÃªn GitHub...");
            push_github::push_to_github();
        }
    }
}
