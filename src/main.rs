use warp::Filter;
use hello_rust2::*;
use std::sync::Arc;
use tokio::sync::Mutex;

#[tokio::main]
async fn main() {
    // ðŸ›  Káº¿t ná»‘i database má»™t láº§n vÃ  dÃ¹ng láº¡i
    let pool = database::connect_db().await.expect("KhÃ´ng thá»ƒ káº¿t ná»‘i tá»›i MySQL");

    // ðŸ›  Láº¥y dá»¯ liá»‡u thÆ¡ tá»« database
    let poem_content = match database::get_poem_content(&pool).await {
        Ok(content) => Arc::new(Mutex::new(content)),
        Err(_) => Arc::new(Mutex::new("KhÃ´ng thá»ƒ láº¥y dá»¯ liá»‡u thÆ¡".to_string())),
    };

    // ðŸ›  Láº¥y ná»™i dung function_content() (khÃ´ng cáº§n Mutex vÃ¬ nÃ³ khÃ´ng thay Ä‘á»•i)
    let my_func_content = Arc::new(content::function_content());

    // ðŸ›  Táº¡o route `/hello`
    let poem_clone = Arc::clone(&poem_content);
    let func_clone = Arc::clone(&my_func_content);
    
    let hello_route = warp::path("hello").and_then(move || {
        let poem_clone = Arc::clone(&poem_clone);
        let func_clone = Arc::clone(&func_clone);

        async move {
            let poem = poem_clone.lock().await.clone();
            let html = front_end::hello::generate_html(&poem, &func_clone);
            Ok::<_, warp::Rejection>(warp::reply::html(html))
        }
    });

    // ðŸ›  Route Ä‘á»ƒ phá»¥c vá»¥ file tÄ©nh (CSS, JS, hÃ¬nh áº£nh)
    let static_files = warp::path("static").and(warp::fs::dir("./static"));

    println!("ðŸš€ Server cháº¡y táº¡i http://localhost:8080/hello");

    // ðŸ”¥ Cháº¡y server vÃ  Ä‘á»£i tÃ­n hiá»‡u Ctrl+C
    let server = warp::serve(hello_route.or(static_files))
        .run(([127, 0, 0, 1], 8080));

    tokio::select! {
        _ = server => {},  // Cháº¡y server
        _ = tokio::signal::ctrl_c() => {
            println!("ðŸ“Œ Nháº­n tÃ­n hiá»‡u Ctrl+C, Ä‘áº©y code lÃªn GitHub...");
            push_github::push_to_github();
        }
    }
}
